import Head from "next/head";
import Image from "next/image";
import { useEffect, useState, useMemo } from "react";
import Timer from "../components/Timer";
import Trivia from "../components/Trivia";
import Styles from "../styles/Home.module.css";
import Start from "../components/Start";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { App } from "@capacitor/app";
import { useRouter } from "next/router";
import { Circles } from "react-loader-spinner";
import {
  AdMob,
  BannerAdPluginEvents,
  BannerAdPosition,
  BannerAdSize,
  InterstitialAdPluginEvents,
} from "@capacitor-community/admob";

export default function Home() {
  const [username, setUsername] = useState(null);
  const [questionNumber, setQuestionNumber] = useState(1);
  const [stop, setStop] = useState(false);
  const [earned, setEarned] = useState("0");
  const [data, setData] = useState([]);
  const [disabled, setDisabled] = useState(false);
  const [loader, setLoader] = useState(false);
  const router = useRouter();

  const showBanner = async () => {
    AdMob.addListener(BannerAdPluginEvents.Loaded, () => {});

    AdMob.addListener(BannerAdPluginEvents.SizeChanged, (size) => {});

    //ca-app-pub-7720753730393552/1815817037 real ad id
    // demo ad unit id ca-app-pub-3940256099942544/6300978111

    const options = {
      adId: "ca-app-pub-7720753730393552/1815817037",
      adSize: BannerAdSize.ADAPTIVE_BANNER,
      position: BannerAdPosition.BOTTOM_CENTER,
      margin: 0,
      // isTesting: true,
    };
    await AdMob.showBanner(options);
  };

  const interstitial = async () => {
    AdMob.addListener(InterstitialAdPluginEvents.Loaded, (info) => {});
    //ca-app-pub-7720753730393552/2959619496 real ad id
    // demo ad unit id ca-app-pub-3940256099942544/8691691433

    const options = {
      adId: "ca-app-pub-7720753730393552/2959619496",
      // isTesting: true,
    };
    await AdMob.prepareInterstitial(options);
  };
  const showInterstitial = async () => {
    await AdMob.showInterstitial();
  };
  
  useEffect(() => {
    interstitial();
    showInterstitial();
    showBanner();
  }, []);

  const adClick = () => {
    showInterstitial();
  };

  useEffect(() => {
    const handleBackButton = async () => {
      if (router.pathname === "/") {
        await App.exitApp();
      } else {
        router.back();
      }
    };
    App.addListener("backButton", handleBackButton);
    return () => {
      App.removeAllListeners("backButton", handleBackButton);
    };
  }, [router.pathname]);

  useEffect(() => {
    setLoader(true);
    fetch("https://server-ue6g.vercel.app/api/getQuestions")
      .then((res) => res.json())
      .then((data) => {
        const selectedData = data.fullQuestions
        .sort(() => 0.5 - Math.random())
        .slice(0, 15);
        setData(selectedData);
        console.log(selectedData);
        setLoader(false);
      });
  }, []);

  const submitResults = async (e) => {
    e.preventDefault();
    const result = { userName: username, score: earned };
    let res = await fetch("https://server-ue6g.vercel.app/api/addResult", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(result),
    });
    let response = await res.json();
    console.log(response);
    if (response.success) {
      toast.success("Score submitted successfully!!", {
        position: "top-left",
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      setDisabled(true);
      setTimeout(() => {
        window.location.reload(false);
      }, 3000);
    } else {
      toast.error(response.error, {
        position: "top-left",
        autoClose: 3000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
    }
  };

  const moneyPyramid = useMemo(
    () =>
      [
        { id: 1, amount: " 10" },
        { id: 2, amount: " 20" },
        { id: 3, amount: " 30" },
        { id: 4, amount: " 40" },
        { id: 5, amount: " 50" },
        { id: 6, amount: "60" },
        { id: 7, amount: " 70" },
        { id: 8, amount: " 80" },
        { id: 9, amount: "90" },
        { id: 10, amount: "100" },
        { id: 11, amount: "110" },
        { id: 12, amount: " 120" },
        { id: 13, amount: " 130" },
        { id: 14, amount: "140" },
        { id: 15, amount: "150" },
      ].reverse(),
    []
  );
  useEffect(() => {
    questionNumber > 1 &&
      setEarned(moneyPyramid.find((m) => m.id === questionNumber - 1).amount);
  }, [questionNumber]);

  return (
    <div className={Styles.app}>
      <Head>
        <title>Crorepati</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {loader && (
        <Circles
          height="80"
          width="80"
          color="white"
          ariaLabel="circles-loading"
          wrapperStyle={{
            position: "absolute",
            top: " 40%",
            left: " 40%",
            // background: "white",
          }}
          wrapperClass=""
          visible={true}
        />
      )}

      <ToastContainer
        position="top-left"
        autoClose={3000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
      <ToastContainer />
      {username ? (
        <>
          <div className={Styles.main}>
            {stop ? (
              <h1 className={Styles.endtext}>
                You Scored:{earned}
                <button
                  onClick={submitResults}
                  className="submitButton"
                  disabled={disabled}
                >
                  submit
                </button>
              </h1>
            ) : (
              <>
                <div className={Styles.top}>
                  <div className={Styles.timer}>
                    <Timer setStop={setStop} questionNumber={questionNumber} />
                  </div>
                </div>
                <div className={Styles.bottom}>
                  <Trivia
                    data={data}
                    setStop={setStop}
                    questionNumber={questionNumber}
                    setQuestionNumber={setQuestionNumber}
                  />
                </div>
              </>
            )}
          </div>
          <div className={Styles.pyramid}>
            <div className={Styles.avatar}>
              <Image src="/boy.png" alt={username} width={50} height={50} />
              <h1>{username}</h1>
            </div>

            <ul className={Styles.moneyList}>
              {moneyPyramid.map((m) => (
                <li
                  className={
                    questionNumber === m.id
                      ? "moneyListItem active"
                      : "moneyListItem"
                  }
                  key={m.id}
                >
                  <span className={Styles.moneyListItemNumber}>{m.id}</span>
                  <span className={Styles.moneyListItemAmount}>{m.amount}</span>
                </li>
              ))}
            </ul>
          </div>
        </>
      ) : (
        <>
          <Start
            setUsername={setUsername}
            adClick={adClick}
            setLoader={setLoader}
          />
        </>
      )}
    </div>
  );
}
